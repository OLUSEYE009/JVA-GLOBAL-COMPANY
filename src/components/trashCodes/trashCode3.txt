
import React, { useState, useEffect } from 'react';

const TaskManager = () => {
  // STATE FOR DARK MODE - ADD THIS
  const [darkMode, setDarkMode] = useState(false);

  // STATE FOR USERNAME
  const [username, setUsername] = useState('');
  const [isEditingUsername, setIsEditingUsername] = useState(true);

  // State for projects and tasks
  const [projects, setProjects] = useState([
    {
      id: 1,
      title: 'Learn React',
      date: 'Dec 31, 2025',
      description: 'In-depth, from the ground up.',
      tasks: [
        { id: 1, text: 'Learn about components, props & state', completed: false },
        { id: 2, text: 'Explore basic concepts', completed: false }
      ]
    }
  ]);
  
  const [newProjectTitle, setNewProjectTitle] = useState('');
  const [newProjectDate, setNewProjectDate] = useState('');
  const [newProjectDescription, setNewProjectDescription] = useState('');
  const [newTaskText, setNewTaskText] = useState('');
  const [selectedProjectId, setSelectedProjectId] = useState(1);

  // LOAD DATA FROM LOCALSTORAGE - ADD DARK MODE
  useEffect(() => {
    const savedUsername = localStorage.getItem('taskManagerUsername');
    const savedProjects = localStorage.getItem('taskManagerProjects');
    const savedSelectedProject = localStorage.getItem('taskManagerSelectedProject');
    const savedDarkMode = localStorage.getItem('taskManagerDarkMode');
    
    if (savedUsername) {
      setUsername(savedUsername);
      setIsEditingUsername(false);
    }
    
    if (savedProjects) {
      setProjects(JSON.parse(savedProjects));
    }
    
    if (savedSelectedProject) {
      setSelectedProjectId(JSON.parse(savedSelectedProject));
    }

    // LOAD DARK MODE PREFERENCE - ADD THIS
    if (savedDarkMode) {
      setDarkMode(JSON.parse(savedDarkMode));
    }
  }, []);

  // SAVE TO LOCALSTORAGE - ADD DARK MODE
  useEffect(() => {
    localStorage.setItem('taskManagerUsername', username);
    localStorage.setItem('taskManagerProjects', JSON.stringify(projects));
    localStorage.setItem('taskManagerSelectedProject', JSON.stringify(selectedProjectId));
    localStorage.setItem('taskManagerDarkMode', JSON.stringify(darkMode)); // ADD THIS LINE
  }, [username, projects, selectedProjectId, darkMode]); // ADD darkMode TO DEPENDENCIES

  // TOGGLE DARK MODE FUNCTION - ADD THIS
  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
  };

  // ADD USERNAME HANDLER FUNCTIONS
  const handleUsernameSubmit = () => {
    if (username.trim() !== '') {
      setIsEditingUsername(false);
    }
  };

  const handleEditUsername = () => {
    setIsEditingUsername(true);
  };

  // Add a new project
  const addProject = () => {
    if (newProjectTitle.trim() === '') return;
    
    const newProject = {
      id: Date.now(),
      title: newProjectTitle,
      date: newProjectDate || 'No date',
      description: newProjectDescription,
      tasks: []
    };
    
    setProjects([...projects, newProject]);
    setNewProjectTitle('');
    setNewProjectDate('');
    setNewProjectDescription('');
  };

  // Add a new task to the selected project
  const addTask = () => {
    if (newTaskText.trim() === '') return;
    
    const updatedProjects = projects.map(project => {
      if (project.id === selectedProjectId) {
        return {
          ...project,
          tasks: [
            ...project.tasks,
            { id: Date.now(), text: newTaskText, completed: false }
          ]
        };
      }
      return project;
    });
    
    setProjects(updatedProjects);
    setNewTaskText('');
  };

  // Toggle task completion status
  const toggleTask = (projectId, taskId) => {
    const updatedProjects = projects.map(project => {
      if (project.id === projectId) {
        return {
          ...project,
          tasks: project.tasks.map(task => 
            task.id === taskId ? { ...task, completed: !task.completed } : task
          )
        };
      }
      return project;
    });
    
    setProjects(updatedProjects);
  };

  // Clear a task
  const clearTask = (projectId, taskId) => {
    const updatedProjects = projects.map(project => {
      if (project.id === projectId) {
        return {
          ...project,
          tasks: project.tasks.filter(task => task.id !== taskId)
        };
      }
      return project;
    });
    
    setProjects(updatedProjects);
  };

  // Get the currently selected project
  const selectedProject = projects.find(project => project.id === selectedProjectId);

  // DARK MODE CLASSES - ADD THIS
  const bgClass = darkMode ? 'bg-gray-900' : 'bg-gray-50';
  const textClass = darkMode ? 'text-gray-100' : 'text-gray-800';
  const textSecondaryClass = darkMode ? 'text-gray-300' : 'text-gray-600';
  const cardBgClass = darkMode ? 'bg-gray-800' : 'bg-white';
  const borderClass = darkMode ? 'border-gray-700' : 'border-gray-200';
  const inputBgClass = darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300';
  const taskBgClass = darkMode ? 'bg-gray-700' : 'bg-gray-50';

  // USERNAME MODAL - UPDATE WITH DARK MODE
  if (isEditingUsername) {
    return (
      <div className={`min-h-screen ${bgClass} flex items-center justify-center`}>
        <div className={`${cardBgClass} p-8 rounded-lg shadow-md w-96`}>
          <h2 className={`text-2xl font-bold ${textClass} mb-4`}>Welcome to Task Manager</h2>
          <p className={`${textSecondaryClass} mb-6`}>Please enter your name to get started</p>
          <div className="space-y-4">
            <input
              type="text"
              placeholder="Enter your name"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleUsernameSubmit()}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${inputBgClass}`}
              autoFocus
            />
            <button
              onClick={handleUsernameSubmit}
              className="w-full bg-blue-500 text-white py-2 rounded-md hover:bg-blue-600 transition duration-200"
            >
              Get Started
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={`min-h-screen ${bgClass} flex transition-colors duration-200`}>
      {/* Sidebar */}
      <div className={`w-64 ${cardBgClass} shadow-md p-6 transition-colors duration-200`}>
        {/* DARK MODE TOGGLE - ADD THIS SECTION */}
        <div className="flex justify-between items-center mb-4">
          <button
            onClick={toggleDarkMode}
            className={`p-2 rounded-lg transition-colors duration-200 ${
              darkMode ? 'bg-gray-700 text-yellow-400' : 'bg-gray-200 text-gray-700'
            }`}
            title={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}
          >
            {darkMode ? (
              // Sun icon for dark mode
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clipRule="evenodd" />
              </svg>
            ) : (
              // Moon icon for light mode
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
              </svg>
            )}
          </button>
        </div>

        {/* USERNAME SECTION - UPDATE WITH DARK MODE CLASSES */}
        <div className={`mb-6 pb-4 border-b ${borderClass}`}>
          <div className="flex items-center justify-between">
            <div>
              <p className={`text-sm ${textSecondaryClass}`}>Welcome back,</p>
              <h1 className={`text-xl font-bold ${textClass}`}>{username}</h1>
            </div>
            <button
              onClick={handleEditUsername}
              className="text-blue-500 hover:text-blue-700 text-sm transition-colors duration-200"
            >
              Edit
            </button>
          </div>
        </div>
        
        <h2 className={`text-lg font-semibold ${textClass} mb-6`}>YOUR PROJECTS</h2>
        
        {/* Add Project Form - UPDATE WITH DARK MODE CLASSES */}
        <div className="mb-8">
          <h3 className={`text-md font-semibold ${textClass} mb-3`}>Add Project</h3>
          <div className="space-y-3">
            <input
              type="text"
              placeholder="Project Title"
              value={newProjectTitle}
              onChange={(e) => setNewProjectTitle(e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${inputBgClass}`}
            />
            <input
              type="text"
              placeholder="Date (e.g., Dec 31, 2025)"
              value={newProjectDate}
              onChange={(e) => setNewProjectDate(e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${inputBgClass}`}
            />
            <textarea
              placeholder="Description"
              value={newProjectDescription}
              onChange={(e) => setNewProjectDescription(e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${inputBgClass}`}
              rows="2"
            />
            <button
              onClick={addProject}
              className="w-full bg-blue-500 text-white py-2 rounded-md hover:bg-blue-600 transition duration-200"
            >
              Add Project
            </button>
          </div>
        </div>
        
        {/* Projects List - UPDATE WITH DARK MODE CLASSES */}
        <div>
          <h3 className={`text-md font-semibold ${textClass} mb-3`}>Projects</h3>
          <ul className="space-y-2">
            {projects.map(project => (
              <li key={project.id}>
                <button
                  onClick={() => setSelectedProjectId(project.id)}
                  className={`w-full text-left px-3 py-2 rounded-md transition duration-200 ${
                    selectedProjectId === project.id 
                      ? 'bg-blue-100 text-blue-700' 
                      : `hover:${darkMode ? 'bg-gray-700' : 'bg-gray-100'} ${textClass}`
                  }`}
                >
                  {project.title}
                </button>
              </li>
            ))}
          </ul>
        </div>
      </div>
      
      {/* Main Content - UPDATE WITH DARK MODE CLASSES */}
      <div className="flex-1 p-8">
        {selectedProject ? (
          <div className={`${cardBgClass} rounded-lg shadow-md p-6 transition-colors duration-200`}>
            <div className="mb-6">
              <h1 className={`text-2xl font-bold ${textClass}`}>{selectedProject.title}</h1>
              <p className={`${textSecondaryClass} mt-1`}>{selectedProject.date}</p>
              <p className={`${textSecondaryClass} mt-2`}>{selectedProject.description}</p>
            </div>
            
            <hr className={`mb-6 ${borderClass}`} />
            
            <div>
              <h2 className={`text-xl font-semibold ${textClass} mb-4`}>Tasks</h2>
              
              {/* Add Task Form - UPDATE WITH DARK MODE CLASSES */}
              <div className="mb-6">
                <div className="flex space-x-2">
                  <input
                    type="text"
                    placeholder="Add Task"
                    value={newTaskText}
                    onChange={(e) => setNewTaskText(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && addTask()}
                    className={`flex-1 px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${inputBgClass}`}
                  />
                  <button
                    onClick={addTask}
                    className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition duration-200"
                  >
                    Add
                  </button>
                </div>
              </div>
              
              {/* Tasks List - UPDATE WITH DARK MODE CLASSES */}
              <div className="space-y-3">
                {selectedProject.tasks.map(task => (
                  <div 
                    key={task.id} 
                    className={`flex items-center justify-between p-3 ${taskBgClass} rounded-md transition-colors duration-200`}
                  >
                    <div className="flex items-center">
                      <input
                        type="checkbox"
                        checked={task.completed}
                        onChange={() => toggleTask(selectedProject.id, task.id)}
                        className="h-4 w-4 text-blue-500 rounded focus:ring-blue-400"
                      />
                      <span 
                        className={`ml-3 ${task.completed ? 'line-through text-gray-400' : textClass}`}
                      >
                        {task.text}
                      </span>
                    </div>
                    <button
                      onClick={() => clearTask(selectedProject.id, task.id)}
                      className="text-red-500 hover:text-red-700 transition duration-200"
                    >
                      Clear
                    </button>
                  </div>
                ))}
                
                {selectedProject.tasks.length === 0 && (
                  <p className={`${textSecondaryClass} text-center py-4`}>No tasks yet. Add a task to get started!</p>
                )}
              </div>
            </div>
          </div>
        ) : (
          <div className={`${cardBgClass} rounded-lg shadow-md p-6 text-center transition-colors duration-200`}>
            <p className={textSecondaryClass}>Select a project to view its details</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default TaskManager;